#include<linux/module.h>
#include<linux/init.h>
#include<linux/kernel.h>
#include<linux/types.h>
#include<linux/cdev.h>
#include<linux/fs.h>
#include<linux/device.h>
#include<linux/errno.h>
#include<linux/usb.h>
#include<linux/slab.h>
#include<linux/uaccess.h>

#define IN_BULK_EP_ADDR 0x81
#define OUT_BULK_EP_ADDR 0x01
static int ret;
static struct device *retDev;

typedef struct USBDevice 
{
	struct cdev USBCDev;
	struct usb_device *USBDev;
	struct usb_interface *USBIntf;
	uint8_t *outBuffer;
	uint8_t *inBuffer;
	uint8_t inAddr;
	uint8_t outAddr;
	size_t inBufSize;
	size_t outBufSize;
	struct urb USB_in_urb;
	struct urb USB_out_urb;
	dev_t devId;
	struct class *USBDevCls;

}USBDevice;
/*******------Driver File Operations-------*******/

int USB_open (struct inode *indp , struct file * filp)
{
	USBDevice *dev = container_of(indp->i_cdev,USBDevice,USBCDev);
	filp->private_data = dev;
	printk(KERN_ALERT"In open\n");
	return 0;
}

int USB_release (struct inode *indp, struct file *filp)
{
	printk(KERN_ALERT"In release\n");
	return 0;
}

ssize_t USB_read(struct file *filp, char __user *usrData, size_t len,
	       	loff_t *loff)
{
	int count;
	USBDevice *dev = (USBDevice *) filp->private_data;
	printk(KERN_ALERT"%d",dev->inAddr);
	ret = usb_bulk_msg(dev->USBDev,usb_rcvbulkpipe(dev->USBDev,dev->inAddr)
			,dev->inBuffer,min(dev->inBufSize,len),&count,HZ*10);
	copy_to_user(usrData,dev->inBuffer,min(dev->outBufSize,len));
	printk(KERN_ALERT"In read\n");
	return ret;
}

ssize_t USB_write(struct file *filp, const char __user *usrData, size_t len,
	        loff_t *loff)
{
	int count;
	USBDevice *dev = (USBDevice *) filp->private_data;
	copy_from_user(dev->outBuffer,usrData,min(dev->outBufSize,len));
	ret = usb_bulk_msg(dev->USBDev,usb_sndbulkpipe(dev->USBDev,dev->outAddr),
			   dev->outBuffer,min(dev->outBufSize,len),&count,HZ*10);
	printk(KERN_ALERT"In write\n");
	return ret;

}


static struct file_operations USB_ops = 
{
	.open =USB_open,
	.release = USB_release,
	.read = USB_read,
	.write = USB_write
};

/*****----Driver Probe And Disconnect------*******/

static struct usb_device_id USBDev_id[] = 
{
	{ USB_DEVICE(0x1cbe,0x0003) },
	{}
};

int USB_probe(struct usb_interface *intf,
	  const struct usb_device_id *id)
{
	uint8_t i = 0;
	USBDevice *dev;
	struct usb_device *udev;
	struct usb_host_interface *USBIntf;
	struct usb_endpoint_descriptor *USBEpDescp;
	printk(KERN_ALERT"In probe\n");
	dev = kzalloc(sizeof(USBDevice),GFP_KERNEL);
	if(NULL == dev)
		return -ENOMEM;
	udev = interface_to_usbdev(intf);
	dev->USBDev = usb_get_dev(udev);
	dev->USBIntf = intf;
	usb_set_intfdata(intf,dev);

	ret = alloc_chrdev_region(&dev->devId,0,1,"USBDev");
	if(ret < 0)
		goto err1;
	
	cdev_init(&dev->USBCDev,&USB_ops);

	ret = cdev_add(&dev->USBCDev,dev->devId,1);
	
	if(ret < 0)
		goto err2;

	dev->USBDevCls = class_create(THIS_MODULE,"USBDev");
	if(NULL == dev->USBDevCls)
		goto err3;
	retDev = device_create(dev->USBDevCls,NULL,dev->devId,NULL,
				"USBDev%d",MAJOR(dev->devId));
	if(NULL == retDev)
		goto err4;
	USBIntf = intf->cur_altsetting;
	

	for(i=0;i < USBIntf->desc.bNumEndpoints;++i)
	{
		USBEpDescp = &USBIntf->endpoint[i].desc;
		
		if((USBEpDescp->bEndpointAddress & USB_DIR_IN) && 
		((USBEpDescp->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) 
		 == USB_ENDPOINT_XFER_BULK ))
		{
			dev->inAddr = USBEpDescp->bEndpointAddress;
			dev->inBufSize = USBEpDescp->wMaxPacketSize;
			dev->inBuffer = kzalloc(USBEpDescp->wMaxPacketSize,
						GFP_KERNEL);
			if(NULL == dev->inBuffer)
				goto err5;

		}
		
		if((USBEpDescp->bEndpointAddress & USB_DIR_OUT) && 
		((USBEpDescp->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) 
		 == USB_ENDPOINT_XFER_BULK ))
		{
			dev->outAddr = USBEpDescp->bEndpointAddress;
			dev->outBufSize = USBEpDescp->wMaxPacketSize;
			dev->outBuffer = kzalloc(USBEpDescp->wMaxPacketSize,
						GFP_KERNEL);
			if(NULL == dev->outBuffer)
				goto err5;

		}

		
	}

	if(dev->outAddr && dev->inAddr)
	{
		printk(KERN_ALERT"Not able to find EndPoint Address");
		goto err5;
	}

	
	return 0;
err5:
	if(dev->outBuffer != NULL)
		kfree(dev->outBuffer);
	if(dev->inBuffer != NULL)
		kfree(dev->inBuffer);
err4:
	class_destroy(dev->USBDevCls);
err3:
	cdev_del(&dev->USBCDev);
err2:
	unregister_chrdev_region(dev->devId,1);
err1:
	kfree(dev);
	return -1;

}

void USB_disconnect(struct usb_interface *intf)
{
	USBDevice *dev;
	dev = usb_get_intfdata(intf);
	printk(KERN_ALERT"In disconnect\n");
	cdev_del(&dev->USBCDev);
	device_destroy(dev->USBDevCls, dev->devId);
	class_destroy(dev->USBDevCls);
	kfree(dev);
	unregister_chrdev_region(dev->devId,1);

}

static struct usb_driver USBDevDriver = 
{
	.name = "Project USB Device Driver",
	.id_table = USBDev_id,
	.probe = USB_probe,
	.disconnect = USB_disconnect
};

/*****----Driver Init And Exit------*******/
static int __init project_init(void)
{
	ret = usb_register(&USBDevDriver);

	printk(KERN_ALERT"Hello World\n");

	return 0;
}

static void __exit  project_exit(void)
{
	usb_deregister(&USBDevDriver);	


	printk(KERN_ALERT"Bye World\n");
}

module_init(project_init);
module_exit(project_exit);
MODULE_LICENSE("GPL");
MODULE_DEVICE_TABLE(usb,USBDev_id);
